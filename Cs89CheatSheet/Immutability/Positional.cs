using System;
using System.Runtime.InteropServices;
using Xunit;

namespace Cs9CheatSheet.Immutability.Positional
{
    class OktaOptionsClass
    {
        public string OktaDomain { get; init;  }
        public int Retrials { get; init; }

        public OktaOptionsClass(string oktaDomain, int retrials)
        {
            OktaDomain = oktaDomain;
            Retrials = retrials;
        }

        //Declaring a Deconstruct method simplifies retrieving properties 
        //(automatically generated by the compiler for records)
        public void Deconstruct(out string domain, out int retrials) 
            => (domain, retrials) = (OktaDomain, Retrials);
    }

    public record OktaOptionsPositionalRecord(string OktaDomain, int Retrials);

    //Records can be derived as classes
    public record OktaOptionsPositionalRecordDerived(string OktaDomain, int Retrials, DateTime ExpirationDate)
        : OktaOptionsPositionalRecord(OktaDomain, Retrials)
    {
        //Compiler generates copy constructor automatically for records
        public OktaOptionsPositionalRecordDerived Copy() 
            => new OktaOptionsPositionalRecordDerived(this);
    }

    public class Tests
    {
        [Fact]
        public void Test()
        {
            //Compiler generates automatically a constructor for records
            var options_class_1 = new OktaOptionsClass(@"https://dev-509249.okta.com", 5);
            var options_record_1 = new OktaOptionsPositionalRecord(@"https://dev-509249.okta.com", 5);

            //Compiler generates automatically init-only property accessors for records
            var domain = options_record_1.OktaDomain;
            var retrials = options_record_1.Retrials;
            //options_record_1.Retrials = 7; //Compiler error, properties are init-only

            //Traditional object deconstruction
            var (domain_class, retrials_class) = (options_class_1.OktaDomain, options_class_1.Retrials);
            //New object deconstruction based on custom Deconstructor method
            var (_domain_class, _retrials_class) = options_class_1;
            //Compiler generates automatically deconstructor for records
            var (domain_record, retrials_record) = options_record_1;

            var options_record_derived_1 = new OktaOptionsPositionalRecordDerived(@"https://dev-509249.okta.com", 5, DateTime.Now);
            //Copying through method (explicit use of the automatically generated copy constructor)
            var options_record_derived_2 = options_record_derived_1.Copy();
            Assert.Equal(options_record_derived_1, options_record_derived_2);

            //Copying through with expression (implicit use of the automatically generated copy constructor)
            var options_record_derived_3 = options_record_derived_1 with { };
            Assert.Equal(options_record_derived_1, options_record_derived_3);
            
            //With expression can generate a modified copy
            var options_record_derived_4 = options_record_derived_1 with { OktaDomain = "OktaUrl2" };
            var (_, retrials_1, expiration_1) = options_record_derived_1;
            var (_, retrials_4, expiration_4) = options_record_derived_4;
            Assert.Equal((retrials_1, expiration_1), (retrials_4, expiration_4));

            //With expression modified fields can refer to original record's fields
            var options_record_derived_5 = options_record_derived_1 with { ExpirationDate = options_record_derived_1.ExpirationDate.AddDays(1.0) };
            var (domain_1, _, _) = options_record_derived_1;
            var (domain_5, retrials_5, _) = options_record_derived_5;
            Assert.Equal((domain_1, retrials_1), (domain_5, retrials_5));
        }
    }
}
